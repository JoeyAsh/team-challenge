// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  ADMIN
  PLAYER
  USER
}

enum PriceStatus {
  UNUSED
  USED
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum ChallengeStatus {
  PENDING
  IN_PROGRESS
  PAUSED
  COMPLETED
}

enum RegistrationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

model Challenge {
  id                  String                @id @default(uuid())
  name                String                @unique
  status              ChallengeStatus       @default(PENDING)
  description         String?
  createdAt           DateTime              @default(now())
  modifiedAt          DateTime              @updatedAt
  games               Game[]
  challengeTimeStamps ChallengeTimeStamps[]
  teams               Team[]
}

model ChallengeTimeStamps {
  id          String    @id @default(uuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  name           String?        @unique
  role           UserRole?      @default(USER)
  accountStatus  AccountStatus? @default(PENDING)
  channel        String?
  imageSrc       String?
  receivingDepts Dept[]         @relation("ReceivingDepts")
  sendingDepts   Dept[]         @relation("SendingDepts")
  registration   Registration?
}

model Game {
  id         String      @id @default(uuid())
  name       String      @unique
  status     GameStatus  @default(PENDING)
  imageSrc   String?
  challenges Challenge[]
  price      Price?      @relation(fields: [priceId], references: [id])
  priceId    String?     @unique
}

model Team {
  id          String    @id @default(uuid())
  name        String    @unique
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @unique
}

model Price {
  id     String      @id @default(uuid())
  price  Float
  status PriceStatus
  game   Game?
}

model Registration {
  id         String              @id @default(uuid())
  user       User                @relation(fields: [userId], references: [id])
  userId     String              @unique
  status     RegistrationStatus? @default(PENDING)
  createdAt  DateTime            @default(now())
  modifiedAt DateTime            @updatedAt
}

model Dept {
  id                String @id @default(uuid())
  count             Int
  receivingMember   User   @relation("ReceivingDepts", fields: [receivingMemberId], references: [id])
  receivingMemberId String
  sendingMember     User   @relation("SendingDepts", fields: [sendingMemberId], references: [id])
  sendingMemberId   String
}
